/**
 * Script pour ajouter un fil d'Ariane standardis√© √† toutes les pages HTML
 * 
 * Usage: 
 * 1. Installez Node.js si ce n'est pas d√©j√† fait
 * 2. Sauvegardez ce script en tant que add-breadcrumb.js √† la racine de votre projet
 * 3. Ex√©cutez la commande: node add-breadcrumb.js
 */

const fs = require('fs');
const path = require('path');

// Configuration
const rootDir = './'; // R√©pertoire racine du projet
const filesToExclude = ['.git', 'node_modules']; // Dossiers √† ignorer
const excludeFiles = ['index.html']; // Fichiers sp√©cifiques √† ignorer

// Structure des sections avec leurs emoji et chemins de fichiers
const sections = {
    'maths': { emoji: 'üî¢', title: 'Math√©matiques', pattern: /maths/i },
    'sciences': { emoji: 'üî¨', title: 'Sciences', pattern: /sciences/i },
    'histoire': { emoji: 'üìú', title: 'Histoire', pattern: /histoire/i },
    'geographie': { emoji: 'üåç', title: 'G√©ographie', pattern: /geo|carte/i },
    'francais': { emoji: 'üìù', title: 'Fran√ßais', pattern: /francais/i },
    'english': { emoji: 'üá¨üáß', title: 'English', pattern: /english/i },
    'programmation': { emoji: 'üíª', title: 'Programmation', pattern: /prog/i },
    'echecs': { emoji: '‚ôüÔ∏è', title: '√âchecs', pattern: /echecs/i },
    'philosophie': { emoji: 'üß†', title: 'Philosophie', pattern: /philo/i },
    'ia': { emoji: 'ü§ñ', title: 'Intelligence Artificielle', pattern: /ia|intelligence/i },
    'ressources': { emoji: 'üìö', title: 'Ressources', pattern: /ressources/i },
    'infos': { emoji: '‚ÑπÔ∏è', title: 'Infos', pattern: /infos/i }
};

// Compteurs pour les statistiques
let filesProcessed = 0;
let filesModified = 0;
let filesSkipped = 0;
let filesWithErrors = 0;

/**
 * D√©termine la section d'une page √† partir de son nom de fichier
 * @param {string} filename - Nom du fichier
 * @returns {Object|null} - Informations sur la section ou null si non trouv√©
 */
function determineSection(filename) {
    for (const [key, section] of Object.entries(sections)) {
        if (section.pattern.test(filename)) {
            return {
                key,
                emoji: section.emoji,
                title: section.title
            };
        }
    }
    return null;
}

/**
 * Extrait le titre de la page √† partir du contenu HTML
 * @param {string} content - Contenu HTML de la page
 * @returns {string|null} - Titre de la page ou null si non trouv√©
 */
function extractPageTitle(content) {
    // Essayer d'extraire de la balise <h1>
    const h1Match = content.match(/<h1[^>]*>(.*?)<\/h1>/i);
    if (h1Match && h1Match[1]) {
        return h1Match[1].replace(/<[^>]*>/g, '').trim(); // Supprime les balises HTML imbriqu√©es
    }
    
    // Sinon, essayer d'extraire de la balise <title>
    const titleMatch = content.match(/<title[^>]*>(.*?)<\/title>/i);
    if (titleMatch && titleMatch[1]) {
        const title = titleMatch[1].replace(/ - Le Monde des Curieux.*$/i, '').trim();
        return title;
    }
    
    return null;
}

/**
 * G√©n√®re le code HTML du fil d'Ariane pour une page
 * @param {string} pageTitle - Titre de la page
 * @param {Object} section - Informations sur la section
 * @returns {string} - Code HTML du fil d'Ariane
 */
function generateBreadcrumb(pageTitle, section) {
    if (section) {
        // Si c'est une page de section principale
        if (pageTitle === section.title || pageTitle.includes(section.title)) {
            return `<div class="breadcrumb" aria-label="Fil d'Ariane">üè† <a href="index.html">Accueil</a> > ${section.emoji} ${section.title}</div>`;
        }
        
        // Si c'est une sous-page dans une section
        return `<div class="breadcrumb" aria-label="Fil d'Ariane">üè† <a href="index.html">Accueil</a> > ${section.emoji} <a href="${section.key}_section.html">${section.title}</a> > ${pageTitle}</div>`;
    }
    
    // Si aucune section n'est identifi√©e, utiliser juste le titre
    return `<div class="breadcrumb" aria-label="Fil d'Ariane">üè† <a href="index.html">Accueil</a> > ${pageTitle}</div>`;
}

/**
 * Ajoute ou met √† jour le fil d'Ariane dans une page HTML
 * @param {string} content - Contenu HTML de la page
 * @param {string} breadcrumbHTML - Code HTML du fil d'Ariane √† ajouter
 * @returns {string} - Contenu HTML modifi√©
 */
function addOrUpdateBreadcrumb(content, breadcrumbHTML) {
    // V√©rifier si un fil d'Ariane existe d√©j√†
    if (content.includes('<div class="breadcrumb"')) {
        // Remplacer le fil d'Ariane existant
        return content.replace(/<div class="breadcrumb"[^>]*>.*?<\/div>/is, breadcrumbHTML);
    }
    
    // Sinon, ajouter un nouveau fil d'Ariane apr√®s la balise <body>
    return content.replace(/<body[^>]*>/i, `$&\n    ${breadcrumbHTML}`);
}

/**
 * Traite un fichier HTML pour ajouter ou mettre √† jour le fil d'Ariane
 * @param {string} filePath - Chemin du fichier HTML √† traiter
 */
function processBreadcrumb(filePath) {
    try {
        const filename = path.basename(filePath);
        
        // Ignorer les fichiers sp√©cifi√©s
        if (excludeFiles.includes(filename)) {
            console.log(`Ignoring excluded file: ${filePath}`);
            filesSkipped++;
            return;
        }
        
        console.log(`Processing: ${filePath}`);
        filesProcessed++;
        
        // Lire le contenu du fichier
        const content = fs.readFileSync(filePath, 'utf8');
        
        // Extraire le titre de la page
        const pageTitle = extractPageTitle(content);
        if (!pageTitle) {
            console.log(`  ‚ö†Ô∏è Impossible d'extraire le titre de la page: ${filePath}`);
            filesWithErrors++;
            return;
        }
        
        // D√©terminer la section
        const section = determineSection(filename);
        
        // G√©n√©rer le fil d'Ariane
        const breadcrumbHTML = generateBreadcrumb(pageTitle, section);
        
        // Ajouter ou mettre √† jour le fil d'Ariane
        const modifiedContent = addOrUpdateBreadcrumb(content, breadcrumbHTML);
        
        // V√©rifier si le contenu a √©t√© modifi√©
        if (modifiedContent === content) {
            console.log(`  ‚ÑπÔ∏è Aucune modification n√©cessaire`);
            return;
        }
        
        // Sauvegarder le fichier modifi√©
        fs.writeFileSync(filePath, modifiedContent, 'utf8');
        console.log(`  ‚úì Fil d'Ariane ajout√©/mis √† jour`);
        filesModified++;
        
    } catch (error) {
        console.error(`  ‚ùå Erreur lors du traitement de ${filePath}:`, error.message);
        filesWithErrors++;
    }
}

/**
 * Parcourt r√©cursivement un r√©pertoire pour traiter tous les fichiers HTML
 * @param {string} dir - Chemin du r√©pertoire √† parcourir
 */
function processDirectory(dir) {
    // Liste tous les fichiers et dossiers
    const items = fs.readdirSync(dir);
    
    for (const item of items) {
        // Construit le chemin complet
        const itemPath = path.join(dir, item);
        
        // V√©rifie si c'est un dossier √† exclure
        if (filesToExclude.some(exclude => itemPath.includes(exclude))) {
            continue;
        }
        
        // R√©cup√®re les informations sur l'√©l√©ment
        const stats = fs.statSync(itemPath);
        
        if (stats.isDirectory()) {
            // Si c'est un dossier, traite-le r√©cursivement
            processDirectory(itemPath);
        } else if (stats.isFile() && item.endsWith('.html')) {
            // Si c'est un fichier HTML, traite-le
            processBreadcrumb(itemPath);
        }
    }
}

// Point d'entr√©e principal
console.log('=== Ajout/mise √† jour des fils d\'Ariane ===\n');

// Ex√©cute le traitement
try {
    processDirectory(rootDir);
    
    // Affiche les statistiques
    console.log('\n=== R√©sum√© ===');
    console.log(`Fichiers HTML trait√©s: ${filesProcessed}`);
    console.log(`Fichiers modifi√©s: ${filesModified}`);
    console.log(`Fichiers ignor√©s: ${filesSkipped}`);
    console.log(`Fichiers avec erreurs: ${filesWithErrors}`);
    console.log('\nTraitement termin√©!');
    
} catch (error) {
    console.error('Erreur globale:', error.message);
}